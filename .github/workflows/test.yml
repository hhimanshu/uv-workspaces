name: Prepare test environment

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Create test results and scripts directories
      run: |
        mkdir -p test-results
        mkdir -p scripts

    - name: Create combine_reports.py script
      run: |
        tee scripts/combine_reports.py << 'SCRIPTEND'
        import xml.etree.ElementTree as ET
        from pathlib import Path
        import sys

        class JUnitReportCombiner:
            def __init__(self):
                self.total_tests = 0
                self.total_failures = 0
                self.total_errors = 0
                self.total_skipped = 0
                self.total_time = 0.0

            def combine_junit_reports(self, output_file):
                root = ET.Element('testsuites')
                test_results_dir = Path('test-results')

                # First, process API tests
                api_file = test_results_dir / 'api-junit.xml'
                if api_file.exists():
                    self.process_package_tests(api_file, root, 'api')

                # Then process App tests
                app_file = test_results_dir / 'app-junit.xml'
                if app_file.exists():
                    self.process_package_tests(app_file, root, 'app')

                # Set aggregate statistics on root element
                root.set('tests', str(self.total_tests))
                root.set('failures', str(self.total_failures))
                root.set('errors', str(self.total_errors))
                root.set('skipped', str(self.total_skipped))
                root.set('time', f"{self.total_time:.3f}")

                # Write the combined report
                tree = ET.ElementTree(root)
                tree.write(output_file, encoding='utf-8', xml_declaration=True)

            def process_package_tests(self, xml_file, root, package_name):
                try:
                    tree = ET.parse(xml_file)
                    testsuite = tree.getroot()

                    # Handle both single testsuite and testsuites wrapper
                    if testsuite.tag == 'testsuites':
                        for suite in testsuite:
                            self.process_suite(suite, root, package_name)
                    else:
                        self.process_suite(testsuite, root, package_name)

                except ET.ParseError as e:
                    print(f"Warning: Could not parse {xml_file}: {e}", file=sys.stderr)
                except Exception as e:
                    print(f"Warning: Error processing {xml_file}: {e}", file=sys.stderr)

            def process_suite(self, suite, root, package_name):
                # Get the original suite name, removing any existing package prefix
                original_name = suite.get('name', 'unnamed')
                if ' - ' in original_name:
                    original_name = original_name.split(' - ', 1)[1]

                # Set the new name with correct package prefix
                suite.set('name', f"{package_name} - {original_name}")

                # Update totals
                self.total_tests += int(suite.get('tests', 0))
                self.total_failures += int(suite.get('failures', 0))
                self.total_errors += int(suite.get('errors', 0))
                self.total_skipped += int(suite.get('skipped', 0))
                self.total_time += float(suite.get('time', 0))

                root.append(suite)

        if __name__ == '__main__':
            combiner = JUnitReportCombiner()
            combiner.combine_junit_reports('test-results/junit.xml')
        SCRIPTEND

    - name: Verify combine_reports.py script
      run: |
        echo "Created combine_reports.py script:"
        ls -l scripts/combine_reports.py
