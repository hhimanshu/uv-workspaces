name: Test Suite

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  PIP_USE_UV: 1

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    permissions:
      checks: write
      pull-requests: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Create and activate virtual environment
        run: |
          python_path=$(which python)
          echo "Using Python from: $python_path"
          python -m venv .venv
          echo "VIRTUAL_ENV=${{ github.workspace }}/.venv" >> $GITHUB_ENV
          echo "${{ github.workspace }}/.venv/bin" >> $GITHUB_PATH

          echo "Python version:"
          python --version
          echo "Python path:"
          which python

      - name: Setup development environment
        run: python -m scripts.setup

      - name: Prepare test environment
        run: mkdir -p test-results

      - name: Run API tests
        id: api-tests
        if: success() || failure()
        run: |
          echo "Running API tests..."
          cd packages/api
          python -m pytest tests/ \
            --junitxml=../../test-results/api-junit.xml \
            --log-file=../../test-results/api-pytest.log \
            --verbose || true

      - name: Run App tests
        id: app-tests
        if: success() || failure()
        run: |
          echo "Running App tests..."
          cd packages/app
          if [ -d "tests" ]; then
            python -m pytest tests/ \
              --junitxml=../../test-results/app-junit.xml \
              --log-file=../../test-results/app-pytest.log \
              --verbose
          else
            echo "No tests directory found in app package"
            # Create an empty test suite report
            echo '<?xml version="1.0" encoding="utf-8"?>
            <testsuites>
              <testsuite name="app" errors="0" failures="0" skipped="0" tests="0" time="0.0">
              </testsuite>
            </testsuites>' > ../../test-results/app-junit.xml
          fi

      # Use Python to combine the test reports properly
      - name: Combine test reports
        if: success() || failure()
        run: |
          cat > combine_reports.py << 'EOL'
          import xml.etree.ElementTree as ET
          from pathlib import Path
          import sys

          def combine_junit_reports(output_file):
              # Create the root testsuites element
              root = ET.Element('testsuites')
              total_tests = 0
              total_failures = 0
              total_errors = 0
              total_skipped = 0
              total_time = 0.0

              # Look for all junit XML files
              test_results_dir = Path('test-results')
              for xml_file in test_results_dir.glob('*-junit.xml'):
                  try:
                      # Parse each report
                      tree = ET.parse(xml_file)
                      testsuite = tree.getroot()

                      # If the root is testsuites, we need to process its children
                      if testsuite.tag == 'testsuites':
                          for suite in testsuite:
                              process_suite(suite, root)
                              update_totals(suite)
                      else:
                          process_suite(testsuite, root)
                          update_totals(testsuite)

                  except ET.ParseError as e:
                      print(f"Warning: Could not parse {xml_file}: {e}", file=sys.stderr)
                      continue
                  except Exception as e:
                      print(f"Warning: Error processing {xml_file}: {e}", file=sys.stderr)
                      continue

              # Set aggregate statistics on root element
              root.set('tests', str(total_tests))
              root.set('failures', str(total_failures))
              root.set('errors', str(total_errors))
              root.set('skipped', str(total_skipped))
              root.set('time', f"{total_time:.3f}")

              # Write the combined report
              tree = ET.ElementTree(root)
              tree.write(output_file, encoding='utf-8', xml_declaration=True)

          def process_suite(suite, root):
              # Add package name based on attributes
              suite_name = suite.get('name', 'unnamed')
              if not suite_name.startswith(('api - ', 'app - ')):
                  package_name = 'api' if 'api' in suite_name.lower() else 'app'
                  suite.set('name', f'{package_name} - {suite_name}')
              root.append(suite)

          def update_totals(suite):
              nonlocal total_tests, total_failures, total_errors, total_skipped, total_time
              total_tests += int(suite.get('tests', 0))
              total_failures += int(suite.get('failures', 0))
              total_errors += int(suite.get('errors', 0))
              total_skipped += int(suite.get('skipped', 0))
              total_time += float(suite.get('time', 0))

          if __name__ == '__main__':
              combine_junit_reports('test-results/junit.xml')
          EOL

          python combine_reports.py

      # Publish test results as a GitHub check run
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Python Test Results
          path: test-results/junit.xml
          reporter: java-junit
          fail-on-error: true
          list-suites: "all"
          list-tests: "all"

      # Upload all test artifacts for debugging
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-results/
          retention-days: 30
