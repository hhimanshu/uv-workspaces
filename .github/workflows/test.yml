name: Test Suite

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  PIP_USE_UV: 1
  # We configure pytest to generate JUnit XML in a specific format
  PYTEST_ADDOPTS: "--junitxml=test-results/junit.xml --log-file=test-results/pytest.log"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    permissions:
      checks: write
      pull-requests: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Create and activate virtual environment
        run: |
          python_path=$(which python)
          echo "Using Python from: $python_path"
          python -m venv .venv
          echo "VIRTUAL_ENV=${{ github.workspace }}/.venv" >> $GITHUB_ENV
          echo "${{ github.workspace }}/.venv/bin" >> $GITHUB_PATH

          echo "Python version:"
          python --version
          echo "Python path:"
          which python

      - name: Setup development environment
        run: python -m scripts.setup

      # Create test results directory and ensure it exists
      - name: Prepare test environment
        run: |
          mkdir -p test-results
          echo "Created test results directory at: $(pwd)/test-results"

      # Run tests and ensure the XML is generated
      - name: Run tests
        id: run-tests
        run: |
          python -m scripts.test
          echo "Checking test results:"
          ls -la test-results/ || true
        continue-on-error: true

      # Publish test results as a GitHub check run
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: Python Test Results # Name of the check run which will be created
          path: test-results/junit.xml # Path to test results
          reporter: java-junit # Format of test results
          fail-on-error: true # Fail the step if there are test failures
          list-suites: "all" # List all test suites in the report
          list-tests: "all" # List all test cases in the report

      # Keep the artifact upload for detailed logs
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-results/
          retention-days: 30
