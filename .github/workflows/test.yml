name: Test Suite

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  PIP_USE_UV: 1

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    permissions:
      checks: write
      pull-requests: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Create and activate virtual environment
        run: |
          python_path=$(which python)
          echo "Using Python from: $python_path"
          python -m venv .venv
          echo "VIRTUAL_ENV=${{ github.workspace }}/.venv" >> $GITHUB_ENV
          echo "${{ github.workspace }}/.venv/bin" >> $GITHUB_PATH

          echo "Python version:"
          python --version
          echo "Python path:"
          which python

      - name: Setup development environment
        run: python -m scripts.setup

      - name: Prepare test environment
        run: mkdir -p test-results

      # Run tests for each package separately and generate separate reports
      - name: Run API tests
        id: api-tests
        if: success() || failure()
        run: |
          echo "Running API tests..."
          cd packages/api
          python -m pytest tests/ \
            --junitxml=../../test-results/api-junit.xml \
            --log-file=../../test-results/api-pytest.log

      - name: Run App tests
        id: app-tests
        if: success() || failure()
        run: |
          echo "Running App tests..."
          cd packages/app
          if [ -d "tests" ]; then
            python -m pytest tests/ \
              --junitxml=../../test-results/app-junit.xml \
              --log-file=../../test-results/app-pytest.log
          else
            echo "No tests directory found in app package"
          fi

      # Combine the test reports for better visualization
      - name: Combine test reports
        if: success() || failure()
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>' > test-results/junit.xml
          echo '<testsuites>' >> test-results/junit.xml

          # Add API test results if they exist
          if [ -f "test-results/api-junit.xml" ]; then
            sed -n '/<testsuite/,/<\/testsuite>/p' test-results/api-junit.xml | \
              sed 's/<testsuite/<testsuite name="api"/g' >> test-results/junit.xml
          fi

          # Add App test results if they exist
          if [ -f "test-results/app-junit.xml" ]; then
            sed -n '/<testsuite/,/<\/testsuite>/p' test-results/app-junit.xml | \
              sed 's/<testsuite/<testsuite name="app"/g' >> test-results/junit.xml
          fi

          echo '</testsuites>' >> test-results/junit.xml

      # Publish test results as a GitHub check run
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Python Test Results
          path: test-results/junit.xml
          reporter: java-junit
          fail-on-error: true
          list-suites: "all"
          list-tests: "all"

      # Upload all test artifacts for debugging
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-results/
          retention-days: 30
